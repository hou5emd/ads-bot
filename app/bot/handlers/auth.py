from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from app.core.config import settings
from app.services.user_service import user_service
from app.services.vk_service import vk_service
from app.core.database import async_session
import urllib.parse
import logging

logger = logging.getLogger(__name__)
router = Router()

def generate_vk_auth_url(telegram_user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK"""
    params = {
        'client_id': settings.VK_APP_ID,
        'redirect_uri': settings.VK_REDIRECT_URI,
        'scope': 'ads,offline',
        'response_type': 'code',
        'state': str(telegram_user_id)
    }
    
    base_url = "https://oauth.vk.com/authorize"
    return f"{base_url}?{urllib.parse.urlencode(params)}"

@router.message(Command("start"))
async def start_handler(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        await user_service.get_or_create_user(session, message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å VK", callback_data="connect_vk")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")]
    ])
    
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VK Ads Analytics Bot!</b>\n\n"
        "üöÄ –Ø –ø–æ–º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ VK Ads\n"
        "üìä –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à VK –∞–∫–∫–∞—É–Ω—Ç:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "connect_vk")
async def connect_vk_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VK"""
    vk_auth_url = generate_vk_auth_url(callback.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ VK", url=vk_auth_url)],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")]
    ])
    
    await callback.message.edit_text(
        "üîê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VK Ads API:</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ VK\"</b>\n"
        "2Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∫–ª–∞–º–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n"
        "3Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ <b>\"–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å\"</b>\n\n"
        "‚ö†Ô∏è <i>–ü–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ 'ads' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</i>",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "check_status")
async def check_status_callback(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    async with async_session() as session:
        user = await user_service.get_user_by_telegram_id(session, callback.from_user.id)
        
        if not user or not user.vk_access_token:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å VK", callback_data="connect_vk")]
            ])
            await callback.message.edit_text(
                "üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
                "VK Ads: ‚ùå <i>–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</i>\n"
                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: -\n\n"
                "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VK –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:",
                reply_markup=keyboard
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        access_token = await user_service.get_vk_token(session, callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VK API
        user_info = await vk_service.get_user_info(access_token)
        
        if user_info:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            ad_accounts = await vk_service.get_ad_accounts(access_token)
            accounts_count = len(ad_accounts) if ad_accounts else 0
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìà –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="get_report")],
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_status")]
            ])
            
            await callback.message.edit_text(
                f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
                f"VK Ads: ‚úÖ <i>–ü–æ–¥–∫–ª—é—á–µ–Ω</i>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_info.get('first_name', '')} {user_info.get('last_name', '')}</b>\n"
                f"–†–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{accounts_count}</b>\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <i>{user.last_seen.strftime('%d.%m.%Y %H:%M') if user.last_seen else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</i>\n\n"
                f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –æ—Ç—á–µ—Ç–æ–≤!",
                reply_markup=keyboard
            )
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å VK", callback_data="connect_vk")]
            ])
            await callback.message.edit_text(
                "üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
                "VK Ads: ‚ö†Ô∏è <i>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞</i>\n\n"
                "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n"
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:",
                reply_markup=keyboard
            )

@router.callback_query(F.data == "get_report")
async def get_report_callback(callback: CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.edit_text(
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...</b>\n\n"
        "‚è≥ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ VK Ads API...",
        reply_markup=None
    )
    
    try:
        async with async_session() as session:
            access_token = await user_service.get_vk_token(session, callback.from_user.id)
            
            if not access_token:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å VK", callback_data="connect_vk")]
                ])
                await callback.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞:</b> VK –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                    reply_markup=keyboard
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            ad_accounts = await vk_service.get_ad_accounts(access_token)
            
            if not ad_accounts:
                await callback.message.edit_text(
                    "üìä <b>–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º</b>\n\n"
                    "‚ÑπÔ∏è –†–µ–∫–ª–∞–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                    "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞\n"
                    "‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="get_report")]
                    ])
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = "üìä <b>–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º</b>\n\n"
            
            for account in ad_accounts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∞–∫–∫–∞—É–Ω—Ç–∞
                account_name = account.get('account_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                account_id = account.get('account_id')
                account_status = account.get('account_status', 0)
                
                status_emoji = "‚úÖ" if account_status == 1 else "‚è∏Ô∏è"
                
                report_text += f"{status_emoji} <b>{account_name}</b>\n"
                report_text += f"   ID: <code>{account_id}</code>\n"
                report_text += f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if account_status == 1 else '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            
            if len(ad_accounts) > 3:
                report_text += f"... –∏ –µ—â–µ {len(ad_accounts) - 3} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            
            report_text += "üìà <i>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</i>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="get_report")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="check_status")]
            ])
            
            await callback.message.edit_text(report_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="get_report")]
            ])
        )

@router.message(Command("status"))
async def status_handler(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    await check_status_callback(CallbackQuery(
        id="status_cmd",
        from_user=message.from_user,
        chat_instance="status",
        message=message,
        data="check_status"
    ))

@router.message(Command("help"))
async def help_handler(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìä <b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VK Ads API
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º

üöÄ <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã  
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    
    await message.answer(help_text)